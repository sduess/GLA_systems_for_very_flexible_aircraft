clear all
%% Define directories and parameters
route_directory = '/home/sduess/Documents/SHARPY_simulations/GLA_systems_for_very_flexible_aircraft/04_Control_Design_Synthesis/';
case_name ='superflexop_cruise_linear_ROM_free_flight'; %'superflexop_cruise_linear_ROM_clamped'; %

%% Set penalties for LQR tuning
input_LQR_tuning = struct();
input_LQR_tuning.idx_penalized_aero_state = []; % [1];
input_LQR_tuning.weights_for_penalized_aero_state =  []; %[0.1];
input_LQR_tuning.idx_penalized_modal_displacement =[]; %[1];
input_LQR_tuning.weights_for_penalized_modal_displacement = []; %[2];
input_LQR_tuning.idx_penalized_modal_velocities = [1];
input_LQR_tuning.weights_for_penalized_modal_velocities = [0.3];
input_LQR_tuning.idx_penalized_rbm_modes = [3]; %[8];
input_LQR_tuning.weights_for_penalized_rbm_modes = [1e-2]; %[2000];
input_LQR_tuning.initial_diagonal_values = 2e-7;
input_LQR_tuning.weights_for_penalized_control_surfaces = 2e-4;
input_LQR_tuning.R_values = diag([1 100]); %1;

design_name = '_with_elevator_vertical_vel'
% design_name = strcat('_onlyq', num2str(input_LQR_tuning.weights_for_penalized_modal_displacement(1)))
%% Create systems and control gains for LQG controller
use_elevators=true;
setup_LQG_controller(route_directory, ...
                     case_name, ...
                     use_elevators, ...
                     input_LQR_tuning, ...
                     design_name);

%% Test LQR controller on a discrete gust with H=10m and I=10%
if use_elevators
    case_name = strcat(case_name, '_elev_on');
end
case_name = strcat(case_name, design_name);
load(strcat('./controller_files_matlab/', case_name, '.mat'));
% Define directory where to find simulink files
addpath(strcat(route_directory,'/../05_Utils/matlab_functions/'));
simulink_file_directory = '/home/sduess/Documents/SHARPY_simulations/GLA_systems_for_very_flexible_aircraft/05_Utils/simulink_files/'%strcat(route_directory, '/../05_Utils/simulink_files/');

% Get gust input
gust_time_series = get_1minuscosine_gust_input(10, ...
                                                0.1, ...
                                                input_settings.dt, ...
                                                input_settings.u_inf, ...
                                                input_settings.flight_time);
simulation_output = run_linear_closed_loop_LQR_response(sys_final, ...
                    input_settings,...
                    gust_time_series, ...
                    controller_final.K, ...
                    simulink_file_directory);

% Open-loop gust respons
simulation_output_open_loop = run_linear_closed_loop_LQR_response(sys_final, ...
                    input_settings,...
                    gust_time_series, ...
                    controller_final.K.*0, ...
                    simulink_file_directory);

%% Plot
figure(1); hold on;plot(simulation_output.actual_output.Time, simulation_output.actual_output.Data(:,[3 3+6])./(7.07/2)*100+6.2); hold off;
 figure(2); hold on;plot(simulation_output.control_input.Time, rad2deg(simulation_output.control_input.Data(:,1:1+1*use_elevators)));hold off;
 figure(3); hold on;plot(simulation_output.control_input.Time, rad2deg(simulation_output.control_input.Data(:,2+1*use_elevators:2+2*use_elevators)));hold off;
figure(4);hold on; plot(simulation_output.actual_output.Time, rad2deg(simulation_output.actual_output.Data(:,32)));hold off;
figure(5); hold on;
plot_several_parameters_from_timeseries({simulation_output.actual_state}, ...
    'states', ...
    10, ...
    17, ...
    size(simulation_output.actual_state.Data, 2)); 

%%
plot_several_parameters_from_timeseries({simulation_output_open_loop.actual_state}, ...
    'states', ...
    10, ...
    17, ...
    size(simulation_output_open_loop.actual_state.Data, 2)); 
hold off